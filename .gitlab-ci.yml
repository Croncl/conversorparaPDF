stages:
  - build
  - test
  - docker_build
  - deploy

variables:
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/conversor-pdf"

before_script:
  - python -V
  - pip install -r requirements.txt

build:
  stage: build
  image: python:3.11
  script:
    - python -V
    - pip install -r requirements.txt
    - echo "✅ Build concluído - dependências instaladas"

test:
  stage: test
  image: python:3.11
  variables:
    PYTHONPATH: "${CI_PROJECT_DIR}"
  script:
    - pip install -r requirements.txt
    - pytest tests/

docker_build:
  stage: docker_build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "🔐 Fazendo login no Container Registry..."
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - echo "🐳 Construindo imagem Docker..."
    - docker build -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:latest

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
  script:
    - echo "🔑 Salvando chave SSH..."
    - echo "$SSH_PRIVATE_KEY" > id_rsa
    - chmod 600 id_rsa
    - echo "🚀 Realizando deploy remoto via SSH..."
    - ssh -o StrictHostKeyChecking=no -i id_rsa $DEPLOY_USER@$DEPLOY_HOST "
        docker pull $IMAGE_NAME:latest &&
        docker stop app || true &&
        docker rm app || true &&
        docker run -d --name app -p 5000:5000 $IMAGE_NAME:latest
      "
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
